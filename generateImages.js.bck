const fs = require('fs');
const path = require('path');
const { v4: uuidv4 } = require('uuid');
const axios = require('axios');

const gradioApiEndpoint = "https://your-gradio-api-endpoint.com/run";
const gradioApiKey = "your_gradio_api_key";  // Replace with your actual Gradio API key

const nbInferenceSteps = 30;
const guidanceScale = 9;

const presets = {
    stockphoto: {
        id: "stockphoto",
        label: "Stock photo",
        family: "european",
        color: "color",
        font: "actionman",
        llmPrompt: "new movie",
        imagePrompt: (prompt) => [
            `cinematic`,
            `hyperrealistic`,
            `footage`,
            `sharp 8k`,
            `analog`,
            `instagram`,
            `photoshoot`,
            `${prompt}`,
            `crisp details`
        ],
        negativePrompt: () => [
            "manga",
            "anime",
            "american comic",
            "grayscale",
            "monochrome",
            "painting",
            "spelling mistakes",
            "deformed, distorted, disfigured", 
            "poorly drawn",
            "bad anatomy", 
            "wrong anatomy",
            "extra limb", 
            "missing limb", 
            "floating limbs", 
            "mutated hands and fingers", 
            "disconnected limbs", 
            "mutation", 
            "mutated", 
            "ugly", 
            "disgusting", 
            "blurry", 
            "amputation",
             "NSFW",
             "text",
        ],
    },
};

async function generateImage(preset, prompt, width, height) {
    const positivePrompt = preset.imagePrompt(prompt).join(", ");

    const payload = {
        model: "Fluently XL Final",
        inpaint_image_url: "",  // Replace with actual image URL
        mask_image_url: "",  // Replace with actual image URL
        mask_blur_factor: 4,
        denoising_strength: 0.7,
        prompt: positivePrompt,
        negative_prompt: preset.negativePrompt().join(", "),
        use_negative_prompt: true,
        seed: 0,
        width: width,
        height: height,
        guidance_scale: guidanceScale,
        randomize_seed: true
    };

    try {
        const response = await axios.post(gradioApiEndpoint, payload, {
            headers: {
                "Authorization": `Bearer ${gradioApiKey}`,
                "Content-Type": "application/json"
            }
        });

        if (response.status !== 200) {
            console.error(response.data);
            throw new Error('Failed to fetch data from Gradio API');
        }

        const assetUrl = response.data.output[0];

        return {
            renderId: uuidv4(),
            status: "completed",
            assetUrl,
            alt: prompt,
            error: "",
            maskUrl: "",
            segments: [],
            blob: Buffer.from(assetUrl.split(",")[1], 'base64')
        };
    } catch (error) {
        console.error(error);
        throw new Error('Error occurred while calling Gradio API');
    }
}

function saveImage(image, outputDir) {
    const imageFilePath = path.join(outputDir, `${image.renderId}.jpeg`);
    const base64Data = image.assetUrl.split(',')[1];
    fs.writeFileSync(imageFilePath, base64Data, 'base64');
    return `${image.renderId}.jpeg`;
}

async function processPrompts(inputFile, width, height, outputDir, preset) {
    const prompts = JSON.parse(fs.readFileSync(inputFile, 'utf8'));
    const images = [];

    for (const entry of prompts.flat()) { // Flatten the array
        const image = await generateImage(preset, entry.prompt, width, height);
        const imageName = saveImage(image, outputDir);
        entry.image = imageName;
        images.push(image);
    }

    fs.writeFileSync(inputFile, JSON.stringify(prompts, null, 2));
    return images;
}

async function retryProcessPrompts(inputFile, width, height, outputDir, preset, retries = 3) {
    let attempt = 0;

    while (attempt < retries) {
        try {
            if (fs.existsSync(outputDir)) {
                fs.rmSync(outputDir, { recursive: true, force: true });
            }
            fs.mkdirSync(outputDir);

            console.log(`Attempt ${attempt + 1} to process prompts.`);
            const images = await processPrompts(inputFile, width, height, outputDir, preset);
            return images;
        } catch (error) {
            console.error(`Error processing prompts on attempt ${attempt + 1}:`, error);
            attempt++;
        }
    }

    throw new Error(`Failed to process prompts after ${retries} attempts.`);
}

async function markImagesDownloadComplete(inputFilePath, uuid) {
    const data = JSON.parse(fs.readFileSync(inputFilePath, 'utf8'));

    for (let item of data) {
        if (item.uuid === uuid) {
            item.imagesDownload = 'complete';
            break;
        }
    }

    fs.writeFileSync(inputFilePath, JSON.stringify(data, null, 2));
}

const outputDir = './public/output';
if (!fs.existsSync(outputDir)) {
    fs.mkdirSync(outputDir);
}

const preset = presets.stockphoto;

module.exports = { retryProcessPrompts, outputDir, preset, markImagesDownloadComplete };